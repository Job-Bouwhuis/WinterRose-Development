using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Diagnostics;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;
using WinterRose.ConsoleExtentions;
using WinterRose.FileManagement;
using WinterRose.Serialization.Distributors;
using WinterRose.Serialization.Things;
using WinterRose.SourceGeneration;
using WinterRose.SourceGeneration.Serialization;
using WinterRose.WIP.TestClasses;

namespace WinterRose.Serialization
{
    /// <summary>
    /// Provides methods for the Serializing and Deserializing to and from the Snow-Format. it can be used to save and load data for use after a program reboot
    /// </summary>
    public static class SnowSerializer
    {
        internal const string NULL = "null";
        internal const int DEFAULT_THREADS_TO_USE = 8;
        internal const char DICTIONARY_DEFINER = '~';
        internal const string EMPTYSTRING = "EMPTYSTRING";

        public static Dictionary<Type, RegisteredSerializer> RegisteredSerializers { get; } = new();
        public static Dictionary<Type, CustomSerializer> CustomSerializers { get; } = new();
        public static SerializerSettings DefaultSettings { get; set; } = new();

        static SnowSerializer()
        {
            RegisterSerializers();
        }

        private static void RegisterSerializers()
        {
            Type[] serializers = TypeWorker.FindTypesWithAttribute<GeneratedAttribute>();
            foreach (Type serializer in serializers)
            {
                GeneratedAttribute? attribute = serializer.GetCustomAttribute<GeneratedAttribute>();
                if(attribute is null)
                {
                    continue;
                }
                if (attribute.GeneratorName == "SerializationGenerator")
                {
                    if(TypeWorker.FindType(attribute.WorkingType) is null)
                    {
                        ConsoleS.WriteWarningLine($"SnowSerializer >The type for {attribute.WorkingType} could not be found.");
                        continue;
                    }
                    RegisteredSerializers.Add(TypeWorker.FindType(attribute.WorkingType)!, new RegisteredSerializer(serializer));
                }            
            }

            serializers = TypeWorker.FindTypesWithBase<CustomSerializer>();
            foreach(Type serializer in serializers)
            {
                CustomSerializer instance = (CustomSerializer)ActivatorExtra.CreateInstance(serializer);
                if (instance != null)
                CustomSerializers.Add(instance.SerializerType, instance);
            }
        }

        /// <summary>
        /// Serializes the given object to a string
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="item"></param>
        /// <returns>A string containing the data of the provided <paramref name="item"/></returns>
        public static SerializationResult Serialize<T>(T item, SerializerSettings? settings = null)
        {
            settings ??= DefaultSettings;
            SerializeReferenceCache cache = new();
            StringBuilder builder = SnowSerializerDistributors.DistributeSerializationData(item, settings, cache);
            SerializationResult result = new(builder);

            return result;
        }

        /// <summary>
        /// WIP... do not use
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="item"></param>
        /// <returns></returns>
        public static DeserializationResult<T> Deserialize<T>(string item, SerializerSettings? settings = null)
        {
            settings ??= DefaultSettings;
            SerializeReferenceCache refCache = new();
            T resultItem;
            try
            {
                item = item.Base64Decode();
            }
            catch { }
            finally
            {
                resultItem = (T)SnowSerializerDistributors.DistributeDeserializationData<T>(item, settings, refCache);
            }
            var result = new DeserializationResult<T>(resultItem);

            return result;
        }

        /// <summary>
        /// A registered generated serializer. generated by putting the <see cref="GenerateSerializerAttribute"/> attrivute on a class. and calling <see cref="CodeGenerator.Generate(Action{string}?)"/>
        /// </summary>
        public class RegisteredSerializer
        {
            /// <summary>
            /// The type of the serializer
            /// </summary>
            public Type SerializerType { get; }

            dynamic Instance;

            internal RegisteredSerializer(Type type)
            {
                if (!type.GetConstructor(Type.EmptyTypes).IsPublic)
                    throw new Exception($"The type {type.Name} does not have a public parameterless constructor");

                SerializerType = type;
            }

            internal dynamic GetInstance()
            {
                if (Instance is null)
                    return Instance = Activator.CreateInstance(SerializerType);
                return Instance;
            }
        }
    }
}