using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Loader;
using System.Text;
using System.Threading.Tasks;
using WinterRose.Exceptions;
using WinterRose.FileManagement;
using WinterRose.Plugins;

namespace WinterRose.SourceGeneration;

/// <summary>
/// A class that manages the source generation process of WinterRose using the <see cref="ICodeGenerator"/> interface.<br></br>
/// Make sure to call <see cref="Generate"/> before anything else in your program
/// <br><br></br></br>
/// 
/// <b>DISCLAIMER:</b> this code generation happens at runtime, not compile time. this is not a roslyn source generator since those are only available in .NET 2.0 and i'm not using .NET 2.0.
/// <br></br>you can however use the syntax generation from roslyn to generate the code for you, as this simply loads the code into the current appdomain as a new assembly.
/// <br></br> all in all this is my way of doing source generation and i like it, so im keeping it. >:)
/// </summary> 
public static class CodeGenerator
{
    /// <summary>
    /// The root directory of generated files. Defaults to "<see cref="Environment.CurrentDirectory"/>/Generated"
    /// </summary>
    public static readonly string RootDirectory = System.IO.Path.Combine(FileManager.PathOneUp(Assembly.GetExecutingAssembly().Location), "Generated");
    private static List<Assembly> withAssemblies = new();

    /// <summary>
    /// A list of all assemblies generated by the source generator.
    /// </summary>
    public static Plugin[] GeneratedPlugins { get; private set; } = [];

    public static void AddAssemblies(params Assembly[] assemblies)
    {
        withAssemblies.AddRange(assemblies);
    }

    public static void Generate(Action<string>? progressReport = null)
    {
        Stopwatch watch = Stopwatch.StartNew();
        Type[] types = TypeWorker.FindTypesWithInterface<ICodeGenerator>();
        List<Plugin> plugins = new List<Plugin>();
        foreach (Type type in types)
        {
            Stopwatch watch2 = Stopwatch.StartNew();
            ICodeGenerator generator = (ICodeGenerator)Activator.CreateInstance(type);
            SourceContext context = new SourceContext();
            if (generator is null)
            {
                throw new WinterCodeGeneratorException($"Failed to create instance of {type.Name}");
            }
            generator.Initialize(context);
            generator.Generate(context);


            foreach (var tree in context.SyntaxTrees)
            {
                string text = tree.ToString();
                text = "#nullable enable\r\n\r\n" + text;

                var root = tree.GetRoot();
                var nodes = root.DescendantNodes().ToList();
                var classnodes = nodes.OfType<ClassDeclarationSyntax>().ToList();
                var classname = classnodes[0].Identifier.Text.Replace("<", "").Replace(">", "");
                var namespacename = nodes.OfType<NamespaceDeclarationSyntax>().ToList()[0].Name.ToString();

                Directory.CreateDirectory(RootDirectory);
                var dir = Directory.CreateDirectory(Path.Combine(RootDirectory, namespacename));
                File.WriteAllText(Path.Combine(dir.FullName, classname + ".g.cs"), text);
            }

            Plugin plugin = new Plugin(type.Name);
            plugin.AddAssembly([.. withAssemblies]);
            plugin.AddAssembly(typeof(GeneratedAttribute));
            plugin.AddAssembly(Assembly.GetCallingAssembly());

            plugin.LoadPlugin(RootDirectory);
            plugins.Add(plugin);

            if (!context.ProduceFile)
                FileManager.DirectoryDelete(new(RootDirectory));
            watch2.Stop();
            progressReport?.Invoke($"Handled generator {type.Name} in {watch2.ElapsedMilliseconds}ms");
        }
        watch.Stop();
        progressReport?.Invoke($"Handled {types.Length} source generators in {watch.ElapsedMilliseconds}ms");

        GeneratedPlugins = [.. plugins];
    }
}

/// <summary>
/// Thrown when a <see cref="ICodeGenerator"/> fails to generate code
/// </summary>
[Serializable]
public class WinterCodeGeneratorException : WinterException
{
    public WinterCodeGeneratorException() { }
    public WinterCodeGeneratorException(string message) : base(message) { }
    public WinterCodeGeneratorException(string message, Exception inner) : base(message, inner) { }
}